# Binary Space Partitioning (BSP) Algorithm for Point-in-Triangle Test

## Mathematical Foundation

The BSP algorithm uses vector cross products to determine if a point is inside a triangle. For a 2D space, the cross product can be calculated using a determinant:

Given two vectors v1 = (x1, y1) and v2 = (x2, y2), the 2D cross product is:
v1 × v2 = x1*y2 - y1*x2

When we have an edge from point A to point B, and a test point P, we can determine which side of the edge P lies on by calculating:

```
                | Bx − Ax      By - Ay |
side(A, B, P) = |                      |  = (Bx - Ax) * (Py - Ay) - (Px - Ax) * (By - Ay)
                | Px - Ax      Py - Ay |
```

This formula gives us a signed value:
- Positive: P is on one side of the edge (often called "left")
- Negative: P is on the other side (often called "right")
- Zero: P is exactly on the edge

## How BSP Works for Triangle Containment

For a point to be inside a triangle:
1. The point must be on the same side of all three edges
2. The point must not lie on any edge

This means either all three side calculations must be positive, or all three must be negative, depending on whether the triangle vertices are provided in clockwise or counter-clockwise order.

## Example Calculation

Triangle with vertices: A=(0,0), B=(5,0), C=(2,5)
Test points: P=(2,2) (inside) and Q=(6,6) (outside)

### Edge AB from (0,0) → (5,0)
sideAB(x,y) = (5-0)*(y-0) - (x-0)*(0-0) = 5y

- For P(2,2): 5*2 = 10 > 0 (left) → continue
- For Q(6,6): 5*6 = 30 > 0 (left) → continue

### Edge BC from (5,0) → (2,5)
sideBC(x,y) = (2-5)*(y-0) - (x-5)*(5-0) = -3y - 5(x-5)

- For P(2,2): -3*2 - 5*(2-5) = -6 + 15 = 9 > 0 → continue
- For Q(6,6): -3*6 - 5*(6-5) = -18 - 5 = -23 < 0 → outside

### Edge CA from (2,5) → (0,0)
sideCA(x,y) = (0-2)*(y-5) - (x-2)*(0-5) = -2(y-5) + 5(x-2)

- For P(2,2): -2*(2-5) + 5*(2-2) = -2*(-3) + 0 = 6 > 0 → inside
- For Q: We already determined Q is outside, so no need to check

## Implementation in Code

My implementation in bsp.cpp uses this exact approach:
1. Calculate the side value for each edge of the triangle
2. Check if the point lies on any edge (side value = 0)
3. Check if the point is on the same side of all edges (all positive or all negative)

## Edge Cases

- Points exactly on an edge or vertex have a side value of 0 for at least one edge calculation
- According to the exercise requirements, these points are NOT considered inside the triangle
- The algorithm handles triangles regardless of whether vertices are provided in clockwise or counter-clockwise order

## Visual Interpretation

The side calculation can be interpreted as:
- Positive: The point is to the left of the directed edge
- Negative: The point is to the right of the directed edge
- Zero: The point is exactly on the edge

### The Relationship Between Sign and Triangle Orientation

The sign (positive or negative) of the side calculation is directly related to the orientation of the triangle:

1. **Counter-clockwise Triangle**:
   - When vertices are ordered counter-clockwise, the "inside" of the triangle is to the left of each directed edge.
   - Therefore, a point is inside if all side calculations are positive.

2. **Clockwise Triangle**:
   - When vertices are ordered clockwise, the "inside" of the triangle is to the right of each directed edge.
   - Therefore, a point is inside if all side calculations are negative.

This relationship comes from the mathematical properties of the cross product:
- The cross product A×B points in the direction given by the right-hand rule
- For 2D vectors embedded in 3D space, this means the cross product points either up (positive z) or down (negative z)
- When traversing a counter-clockwise triangle, the "inside" is always to the left, resulting in positive cross products
- When traversing a clockwise triangle, the "inside" is always to the right, resulting in negative cross products

My implementation handles both cases by checking if all side values have the same sign (either all positive or all negative).